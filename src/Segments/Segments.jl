### This file contains public API ###

"""
    Segments{FT}

A struct representing a collection of segments using floating-point precision `FT`.
    Equivalent to `Geom{2,FT}`. See help on `Geom{n,FT}` for details.
```
"""
const Segments{FT} = Geom{2,FT}


"""
    Segments(type = Float64)

Generate an empty point cloud.
By default a `Segments` object will only accept coordinates in double floating
precision (`Float64`) but a lower precision can be generated by specifying the
corresponding data type as in `Segments(Float32)`.

# Arguments
- `type`: The floating-point precision type for the point cloud (default is `Float64`).

# Returns
A `Segments` object with no vertices.

# Example
```jldoctest
julia> c = Segments();

julia> nvertices(c);

julia> nsegments(c);

julia> Segments(Float32);
```
"""
function Segments(::Type{FT} = Float64) where {FT<:AbstractFloat}
    Geom(Val(2), FT)
end

"""
    Segments(ns, type)

Generate a collection of segments with enough memory allocated to store `ns` segments. The
behaviour is equivalent to generating an empty segment collection but may be computationally more
efficient when appending a large number of segments. If a lower floating precision is
required, this may be specified as an optional second argument as in `Segments(10, Float32)`.

# Arguments
- `ns`: The number of segments to allocate memory for.
- `type`: The floating-point precision type for the segments (default is `Float64`).

# Returns
A `Segments` object with no vertices.

# Example
```jldoctest
julia> c = Points(1_000);

julia> nvertices(c);

julia> nsegments(c);

julia> Segments(1_000, Float32);
```
"""
function Segments(ns::Number, ::Type{FT} = Float64) where {FT<:AbstractFloat}
   Geom(np, Val(2), FT)
end

"""
    Segments(vertices)

Generate a collection of segments from a vector of vertices.

# Arguments
- `vertices`: List of vertices (each vertex implement as `Vec`).

# Returns
A `Segments` object.

# Example
```jldoctest
julia> verts = [Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(1.0, 0.0, 0.0)];

julia> Segments(verts);
```
"""
Segments(vertices::Vector{<:Vec}) = Geom(vertices, Val(2))


"""
    Segments(segments)

Merge multiple collections of segments into a single one

# Arguments
- `segments`: Vector of segment collections to merge.

# Returns
A new `Segments` object that is the result of merging all the input segment collections.

# Example
```jldoctest
julia> s1 = Segment(length = 2.0);

julia> s2 = Segment(length = 1.0);

julia> rotatex!(s2, pi/4);

julia> s = Segments([s1,s2]);
```
"""
Segments(segments::Vector{<:Segments}) = Geom(segments)



# Types and size
"""
    nsegments(segments)

Extract the number of segments in a segment collection.

# Arguments
- `segments`: The segment collection from which to extract the number of segments.

# Returns
The number of segments in the segment collection as an integer.

# Example
```jldoctest
julia> v = [Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(1.0, 0.0, 0.0)];

julia> c = Segments(v);

julia> nsegments(c);
```
"""
nsegments(segments::Segment) = length(segments)


# Accessor functions
"""
    get_segment(segments::Segments, i)

Retrieve the vertices of the i-th segment.

# Arguments
- `segments`: The segment collection from which to retrieve the segment.
- `i`: The index of the segment to retrieve.

# Returns
A vector containing two vertices defining the i-th segment.

# Example
```jldoctest
julia> v = [Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(1.0, 0.0, 0.0),
            Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)];

julia> c = Segments(v);

julia> get_segment(c, 3);
```
"""
get_segment(segments::Segments, i) = get_segment(segments, i)
