### This file contains public API ###

"""
    Mesh{FT}

A struct representing a 3D mesh using floating-point precision `FT`. Equivalent to `Geom{3,FT}`.
See help on `Geom{n,FT}` for details.
```
"""
const Mesh{FT} = Geom{3,FT}


"""
    Mesh(type = Float64)

Generate an empty triangular dense mesh that represents a primitive or 3D scene.
By default a `Mesh` object will only accept coordinates in double floating
precision (`Float64`) but a lower precision can be generated by specifying the
corresponding data type as in `Mesh(Float32)`.

# Arguments
- `type`: The floating-point precision type for the mesh data (default is `Float64`).

# Returns
A `Mesh` object with no vertices.

# Example
```jldoctest
julia> m = Mesh();

julia> nvertices(m);

julia> ntriangles(m);

julia> Mesh(Float32);
```
"""
function Mesh(::Type{FT} = Float64) where {FT<:AbstractFloat}
    Geom(Val(3), FT)
end

"""
    Mesh(nt, type)

Generate a triangular dense mesh with enough memory allocated to store `nt`
triangles. The behaviour is equivalent to generating an empty
mesh but may be computationally more efficient when appending a large number of
primitives. If a lower floating precision is required, this may be specified
as an optional second argument as in `Mesh(10, Float32)`.

# Arguments
- `nt`: The number of triangles to allocate memory for.
- `type`: The floating-point precision type for the mesh data (default is `Float64`).

# Returns
A `Mesh` object with no vertices.

# Example
```jldoctest
julia> m = Mesh(1_000);

julia> nvertices(m);

julia> ntriangles(m);

julia> Mesh(1_000, Float32);
```
"""
function Mesh(nt::Number, ::Type{FT} = Float64) where {FT<:AbstractFloat}
   Geom(nt, Val(3), FT)
end

"""
    Mesh(vertices)

Generate a triangular mesh from a vector of vertices.

# Arguments
- `vertices`: List of vertices (each vertex implement as `Vec`).

# Returns
A `Mesh` object.

# Example
```jldoctest
julia> verts = [Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(1.0, 0.0, 0.0)];

julia> Mesh(verts);
```
"""
Mesh(vertices::Vector{<:Vec}) = Geom(vertices, Val(3))


"""
    Mesh(meshes)

Merge multiple meshes into a single one

# Arguments
- `meshes`: Vector of meshes to merge.

# Returns
A new `Mesh` object that is the result of merging all the input meshes.

# Example
```jldoctest
julia> e = Ellipse(length = 2.0, width = 2.0, n = 10);

julia> r = Rectangle(length = 10.0, width = 0.2);

julia> m = Mesh([e,r]);
```
"""
Mesh(meshes::Vector{<:Mesh}) = Geom(meshes)



# Types and size
"""
    ntriangles(mesh)

Extract the number of triangles in a mesh.

# Arguments
- `mesh`: The mesh from which to extract the number of triangles.

# Returns
The number of triangles in the mesh as an integer.

# Example
```jldoctest
julia> v = [Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(1.0, 0.0, 0.0)];

julia> m = Mesh(v);

julia> ntriangles(m);
```
"""
ntriangles(mesh::Mesh) = length(mesh)


# Accessor functions
"""
    get_triangle(m::Mesh, i)

Retrieve the vertices for the i-th triangle in a mesh.

# Arguments
- `mesh`: The mesh from which to retrieve the triangle.
- `i`: The index of the triangle to retrieve.

# Returns
A vector containing the three vertices defining the i-th triangle.

# Example
```jldoctest
julia> v = [Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(1.0, 0.0, 0.0),
            Vec(0.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)];

julia> m = Mesh(v);

julia> get_triangle(m, 2);
```
"""
get_triangle(m::Mesh, i) = get_geom(m, i)
